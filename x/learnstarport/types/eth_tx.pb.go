// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: learnstarport/eth_tx.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EthTx struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Txid    string `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	To      string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	From    string `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	Amount  string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EthTx) Reset()         { *m = EthTx{} }
func (m *EthTx) String() string { return proto.CompactTextString(m) }
func (*EthTx) ProtoMessage()    {}
func (*EthTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_73dc3c01c083284e, []int{0}
}
func (m *EthTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthTx.Merge(m, src)
}
func (m *EthTx) XXX_Size() int {
	return m.Size()
}
func (m *EthTx) XXX_DiscardUnknown() {
	xxx_messageInfo_EthTx.DiscardUnknown(m)
}

var xxx_messageInfo_EthTx proto.InternalMessageInfo

func (m *EthTx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EthTx) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EthTx) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *EthTx) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *EthTx) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *EthTx) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func init() {
	proto.RegisterType((*EthTx)(nil), "turtlebasket.learnstarport.learnstarport.EthTx")
}

func init() { proto.RegisterFile("learnstarport/eth_tx.proto", fileDescriptor_73dc3c01c083284e) }

var fileDescriptor_73dc3c01c083284e = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0x84, 0x40,
	0x18, 0x84, 0x59, 0xe4, 0x30, 0x6e, 0x61, 0xb1, 0x31, 0x66, 0x73, 0xc5, 0xe6, 0x62, 0x45, 0x23,
	0x5b, 0xd8, 0x5a, 0x99, 0xf8, 0x02, 0x17, 0x63, 0x61, 0x63, 0x96, 0x63, 0x05, 0xe2, 0x71, 0x3f,
	0x59, 0x86, 0x04, 0x4b, 0xdf, 0xc0, 0xc7, 0xb2, 0xbc, 0xd2, 0xd2, 0xc0, 0x8b, 0x18, 0xf6, 0xd4,
	0x1c, 0xdd, 0xcc, 0xe4, 0x9b, 0x62, 0x86, 0x2f, 0xb7, 0xd6, 0xb8, 0x5d, 0x0b, 0xe3, 0x1a, 0x72,
	0xd0, 0x16, 0xe5, 0x33, 0xfa, 0xb4, 0x71, 0x04, 0x12, 0x09, 0x3a, 0x87, 0xad, 0xcd, 0x4c, 0xfb,
	0x6a, 0x91, 0xce, 0xc0, 0xb9, 0x5b, 0x5e, 0x14, 0x54, 0x90, 0x2f, 0xe9, 0x49, 0x1d, 0xfa, 0x57,
	0xef, 0x8c, 0x2f, 0xee, 0x51, 0x3e, 0xf4, 0x42, 0xf2, 0xd3, 0x8d, 0xb3, 0x06, 0xe4, 0x24, 0x5b,
	0xb1, 0xe4, 0x6c, 0xfd, 0x67, 0xc5, 0x39, 0x0f, 0xab, 0x5c, 0x86, 0x2b, 0x96, 0x44, 0xeb, 0xb0,
	0xca, 0x85, 0xe0, 0x11, 0xfa, 0x2a, 0x97, 0x27, 0x1e, 0xf3, 0x7a, 0x62, 0x40, 0x32, 0xf2, 0x49,
	0x08, 0x9a, 0x98, 0x17, 0x47, 0xb5, 0x5c, 0x1c, 0x98, 0x49, 0x8b, 0x4b, 0x1e, 0x9b, 0x9a, 0xba,
	0x1d, 0x64, 0xec, 0xd3, 0x5f, 0x77, 0xf7, 0xf8, 0x39, 0x28, 0xb6, 0x1f, 0x14, 0xfb, 0x1e, 0x14,
	0xfb, 0x18, 0x55, 0xb0, 0x1f, 0x55, 0xf0, 0x35, 0xaa, 0xe0, 0xe9, 0xb6, 0xa8, 0x50, 0x76, 0x59,
	0xba, 0xa1, 0x5a, 0x1f, 0x0f, 0xd5, 0x7e, 0xda, 0xf5, 0xff, 0x25, 0xbd, 0x9e, 0x5f, 0x84, 0xb7,
	0xc6, 0xb6, 0x59, 0xec, 0x27, 0xde, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x60, 0xe3, 0x98,
	0x40, 0x01, 0x00, 0x00,
}

func (m *EthTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEthTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintEthTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintEthTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintEthTx(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintEthTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEthTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEthTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovEthTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EthTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEthTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovEthTx(uint64(m.Id))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovEthTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovEthTx(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovEthTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEthTx(uint64(l))
	}
	return n
}

func sovEthTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEthTx(x uint64) (n int) {
	return sovEthTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EthTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEthTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEthTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEthTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEthTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEthTx = fmt.Errorf("proto: unexpected end of group")
)
